# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI
env:
  NODE_ENV: 'dev'
  STARTUP_TYPE: 'nats'
  SERVER_URL: 'nats://localhost:4222'
  ACK_POLICY: 'None'
  PRODUCER_STREAM: 'temp-rule-sub'
  CONSUMER_STREAM: 'CRSP'
  STREAM_SUBJECT:
  APM_ACTIVE: false
  APM_LOGGING: false
  FUNCTION_NAME: 'typology-processor'
  REDIS_DB: 0
  REDIS_AUTH:
  REDIS_SERVERS: '[{"host":"127.0.0.1", "port":6379}]'
  REDIS_IS_CLUSTER: false
  DATABASE_URL: 'http://localhost:8529/'
  DATABASE_USER: 'root'
  DATABASE_PASSWORD:
  DATABASE_NAME: 'networkmap'
  GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
  NPM_SCOPE: "@frmscoe"
  NPM_REGISTRY: "https://npm.pkg.github.com/"
  ENV_NEWMAN: https://raw.githubusercontent.com/frmscoe/postman/indexes/environments/Ekuta-LOCAL.postman_environment.json
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      responseAverage: ${{ steps.newman_test.outputs.responseAverage }}
      responseMin: ${{ steps.newman_test.outputs.responseMin }}
      responseMax: ${{ steps.newman_test.outputs.responseMax }}
      responseSd: ${{ steps.newman_test.outputs.responseSd }}
      numberOfTest: ${{ steps.newman_test.outputs.numberOfTest }}
    name: integration test
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        node-version: [20]
        redis-version: [6]
    steps:
      - uses: actions/checkout@v3
      - name: Start Arango
        uses: xinova/arangodb-action@v1
        with:
          arangodb version: 'latest'

      - name: Setup Arango
        run: newman run https://raw.githubusercontent.com/frmscoe/postman/indexes/ArangoDB%20Setup.json -e ${{ env.ENV_NEWMAN }} --timeout-request 10200

      - name: Startup Nats
        uses: onichandame/nats-action@master
        with:
          port: 4222

      - name: Startup Redis
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: ${{ matrix.redis-version }}

      - name: StartUp Nats-Rest Proxy
        run: docker pull ghcr.io/frmscoe/nats-utilities:latest && docker run --network=host -e NODE_ENV='dev' ghcr.io/frmscoe/nats-utilities:latest &

      - name: Setup Node.js (.npmrc)
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          registry-url: https://npm.pkg.github.com/
          scope: '@frmscoe'

      - name: Install dependencies

        run: npm ci
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Processor Build
        run: npm run build

      - name: Processor Start
        run: npm run start &

      - name: Test Processor
        run: newman run https://raw.githubusercontent.com/frmscoe/postman/main/micro_processors/ChannelRouterSetupProcessor_Proxy_Test.postman_collection.json -e ${{ env.ENV_NEWMAN }} --timeout-request 10200 -r json --reporter-json-export fullReport.json

      - name: Extract Specific Field
        id: newman_test
        run: |
          echo "##[set-output name=numberOfTest]$(jq -r '.run.stats.tests.total' fullReport.json)"
          echo "##[set-output name=responseSd]$(jq -r '.run.timings.responseSd' fullReport.json)"
          echo "##[set-output name=responseMax]$(jq -r '.run.timings.responseMax' fullReport.json)"
          echo "##[set-output name=responseMin]$(jq -r '.run.timings.responseMin' fullReport.json)"
          echo "##[set-output name=responseAverage]$(jq -r '.run.timings.responseAverage' fullReport.json)"

      - name: Upload Results
        uses: actions/upload-artifact@v3
        with:
          name: Full_Report.json
          path: fullReport.json

  output:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Comment on PR

        run: |
              COMMENT_BODY="⚠️ Newman Test Results  <br /><br />Number of tests ${{ needs.build.outputs.numberOfTest }} <br /><br />Response stats<blockquote> <li> Response Average ${{ needs.build.outputs.responseAverage }}ms <br /><li>Response Min ${{ needs.build.outputs.responseMin }}ms <br /><li>Response max ${{ needs.build.outputs.responseMax }}ms <br /><li>Response standard dev ${{ needs.build.outputs.responseSd }}ms"

              API_URL="https://api.github.com/repos/${{github.repository}}/issues/${{github.event.number}}/comments"
              curl -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data-raw "{\"body\":\"$COMMENT_BODY\"}" \
              $API_URL

  test:
    runs-on: ubuntu-latest
    name: unit tests
    strategy:
      matrix:
        node-version: [20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          registry-url: ${{ env.NPM_REGISTRY }}
          scope: ${{ env.NPM_SCOPE }}
      - name: Install dependencies
        run: npm ci
        env:
          NODE_ENV: 'test'

  lint:
    runs-on: ubuntu-latest
    name: check style
    strategy:
      matrix:
        node-version: [20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          registry-url: ${{ env.NPM_REGISTRY }}
          scope: ${{ env.NPM_SCOPE }}
      - name: Install dependencies
        run: npm ci
      - name: Check linting
        run: npm run lint
